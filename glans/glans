#!/usr/bin/env bash

### Glans
#
# Script to browse the shaft upload log using a dzen window.
#
# Requires: curl, dzen, ImageMagick, and bash.
#
###

help(){ # Display the help message
    echo "Glans - script to browse the shaft upload log using a dzen window."
    echo "Usage: ${0##/*/} [options] [log]      # Takes a screenshot"
    echo "-f |--font (name)                 Name of the font to use"
    echo "-fh|--font-height (height)        Font height in pixels !IMPORTANT!"
    echo "-bg|--background (hex RGB)        Background color"
    echo "-fg|--foreground (hex RGB)        Text color"
    echo "-F |--format (xpm|xbm)            Thumbnail format"
	echo "-p |--page (page number)          Which page to view"
    echo "-g |--geometry (WidthxHeight)     The width and height for the thumbnail"
}

get_font_height(){ # Get the font height from 
	FONT_HEIGHT=$(echo "${FONT_NAME}" | sed 's/-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)-\([^-]*\)/\7/')
}

page(){ # Set page position
    if [[ ${1} -eq 0 ]]; then
        PREVIOUS_PAGE=""
        NEXT_PAGE=";key_greater=exec:${0} --page 1,exit"
        POSITION=0
    else
        PREVIOUS_PAGE=";key_less=exec:${0} --page $((${PAGE} - 1)),exit"
        NEXT_PAGE=";key_greater=exec:${0} --page $((${PAGE} + 1)),exit"
        POSITION=$((${ENTRIES} * ${1} + 1))
    fi
}

geometry(){ # Get geometry
    eval "$(echo ${1} | sed 's/\([0-9]*\)x\([0-9]*\)/W=\1;H=\2/')"
    [[ ${W} ]] && MAX_THUMBNAIL_WIDTH="${W}"
    [[ ${H} ]] && MAX_THUMBNAIL_HEIGHT="${H}"
    unset W
    unset H
}

thumbnail_geometry(){ # Set the thumbnail geometry
    local FILE_WIDTH="$(identify -format '%w' ${FILE})"
    local FILE_HEIGHT="$(identify -format '%h' ${FILE})"

    if (( $(echo "(${FILE_WIDTH}/${FILE_HEIGHT}) < (${MAX_THUMBNAIL_WIDTH}/${MAX_THUMBNAIL_HEIGHT})" | bc -l) )); then
        echo "x${MAX_THUMBNAIL_HEIGHT}"
    else
        echo "${MAX_THUMBNAIL_WIDTH}"
    fi
}

window_geometry(){ # Set the window geometry
    local SCREEN_WIDTH=$(xdpyinfo | grep dimensions | sed -r 's/^[^0-9]*([0-9]+)x([0-9]+).*$/\1/')
    local SCREEN_HEIGHT=$(xdpyinfo | grep dimensions | sed -r 's/^[^0-9]*([0-9]+)x([0-9]+).*$/\2/')
    LINES=$(( (${MAX_THUMBNAIL_HEIGHT} + ${FONT_HEIGHT} + 1) / (${FONT_HEIGHT} + 2) + 2 ))

    DZEN_WIDTH=$(( (${PADDING} + 1) * 2 + ${MAX_THUMBNAIL_WIDTH} ))
    X_OFFSET=$(( (${SCREEN_WIDTH} - ${DZEN_WIDTH}) / 2 ))
    DZEN_HEIGHT=$(( (${LINES} + 1 ) * (${FONT_HEIGHT} + 2) ))
    Y_OFFSET=$(( (${SCREEN_HEIGHT} -  ${DZEN_HEIGHT}) / 2 ))
}

right_align(){ # Align text to right margin
    local _WIDTH
    local _OFFSET
    _WIDTH=$(textwidth "${FONT_NAME}" "${1}")
    _OFFSET=$((${DZEN_WIDTH}-${_WIDTH}-${PADDING}))
    echo "^pa(${_OFFSET})${2}${1}${3}"
}

thumbnail(){ # Create the thumbnail
    convert -resize $(thumbnail_geometry) "${FILE}" "${THUMBNAIL}" || \
    (grep --silent "${_URL}" "${FILE}" \
        && convert -background ${BACKGROUND} -fill ${FOREGROUND} -size ${MAX_THUMBNAIL_WIDTH}x${MAX_THUMBNAIL_HEIGHT} -gravity center label:"Encrypted" ${THUMBNAIL} \
        || convert -background ${BACKGROUND} -fill ${FOREGROUND} -size ${MAX_THUMBNAIL_WIDTH}x${MAX_THUMBNAIL_HEIGHT} -gravity center label:"$(file -b --mime-type ${FILE})" ${THUMBNAIL})
}

preview(){ # Create a dzen preview message
    # Create a thumbnail
    THUMBNAIL=".gland.thumb.${NUMBER}.${FORMAT}"
    FILE="${file}"
    if [[ "${FILE}" == "Standard input" ]]; then
        curl -s "${url}" -o ".gland.thumb.${NUMBER}.tmp"
        FILE=".gland.thumb.${NUMBER}.tmp"
    fi
    _URL=$(echo "${url}" | cut -f1 -d"#" | sed 's:.*/::')
    _URL=${_URL%%*/}
    thumbnail

    # Get the dimensions of the thumbnail
    local THUMBNAIL_HEIGHT=$(identify -format '%h' ${THUMBNAIL})
    local THUMBNAIL_WIDTH=$(identify -format '%w' ${THUMBNAIL})

    # Calculate the lines needed to display the image
    local NEEDED_LINES=$(( (${THUMBNAIL_HEIGHT} + ${FONT_HEIGHT} + 1) / (${FONT_HEIGHT} + 2) + 2 ))
    # Calculate the bottom padding to be used
    local LINE_PADDING=$(( ( (${LINES} - 2) - ${NEEDED_LINES} ) / 2 ))

	# Pad top of thumbnail
    for i in $(seq 1 ${LINE_PADDING}); do
        echo -ne '\n'
    done

    # Create the dzen message
    local ITER=$(( ${LINES} - 3 - ${LINE_PADDING} ))
    echo "^pa(${PADDING};1)^i(${THUMBNAIL})"
    for i in $(seq 1 ${ITER}); do
        OFFSET=$(( ${i} * (${FONT_HEIGHT} + 2) ))
        echo "^p(${PADDING};-${OFFSET})^i(${THUMBNAIL})"
    done
    echo "^pa(${PADDING})^ca(1, echo -n ${url} | xsel -p; echo -n ${url} | xsel -b; xsel -k; notify-send 'URL copied to clipboard')[ ${_URL} ]^ca()$(right_align "[ Delete ]" "^ca(1, curl -s ${delete})^fg(#FF0000)" "^fg()^ca()")"

}

# Setting defaults
FONT_NAME="$(grep '^[^!].*font' .Xresources | sed 's/.*: //')"
FORMAT="xpm"
BACKGROUND="#222222"
FOREGROUND="#a2bbca"
GENITOOLS_DIRECTORY="${HOME?/}/.genitools"
LOG_FILE="${GENITOOLS_DIRECTORY}/shaft.log"
CONFIG_FILE="${GENITOOLS_DIRECTORY}/glans.conf"

declare -i FONT_HEIGHT=$(get_font_height)
declare -i POSITION=0
declare -i ENTRIES=10
declare -i PADDING=5
declare -i MAX_THUMBNAIL_HEIGHT=450
declare -i MAX_THUMBNAIL_WIDTH=720
declare -i LINES=0
declare -i NUMBER=0
declare -i PAGE=0

# Read the config file if available
if [ -f ${CONFIG_FILE} ]; then
    source ${CONFIG_FILE}
fi

# Handle arguments
while [ "$#" -ne 0 ]; do
    case "${1}" in
        -h|--help)
            help
            exit 0
            ;;
        -f|--font)
            FONT_NAME="${2}"
			get_font_height
            shift
            shift
            ;;
        -fh|--font-height)
            FONT_HEIGHT="${2}"
            shift
            shift
            ;;
        -bg|--background)
            BACKGROUND="${2}"
            shift
            shift
            ;;
        -fg|--foreground)
            FOREGROUND="${2}"
            shift
            shift
            ;;
        -F|--format)
            FORMAT="${2}"
            shift
            shift
            ;;
        -p|--page)
            PAGE="${2}"
            shift
            shift
            ;;
        -g|--geometry)
            geometry "${2}"
            shift
            shift
            ;;
        *)
            if [ -f "${1}" ]; then
                LOG_FILE="${1}"
                shift

            else
                help
                echo ""
                echo "File not found: ${1}"
                exit 0
            fi
            ;;
    esac
done

main(){
    echo "Glans"
    IFS=$'\n'
    for line in $( cat ${LOG_FILE} | sed -e 's/ | /";/g' -e 's/: /="/g' -e 's/^/time="/' -e 's/$/"/' | tail -n +${POSITION} | head -n ${ENTRIES} ); do
        eval $line
        NUMBER+=1
        echo "^p(${PADDING})$(date +'%D %T' -d @$time)^p(${PADDING}):^p(${PADDING})$( basename $file) $(right_align "[ ? ]" "^ca(1, notify-send \"Left and Right keys to move between entries, &lt; and &gt; to move between pages\")" "^ca()")"
        preview 2>/dev/null

    done
}

page "${PAGE}"
window_geometry
RESULT=$(main)
echo "${RESULT}" | dzen2 -l "${LINES}" -p -w "${DZEN_WIDTH}" -bg "${BACKGROUND}" -fg "${FOREGROUND}" -x "${X_OFFSET}" -y "${Y_OFFSET}" -fn "${FONT_NAME}" -e "onstart=scrollhome,uncollapse,grabkeys;enterslave=grabmouse,grabkeys;leaveslave=ungrabmouse,ungrabkeys;button4=scrollup:${LINES};button5=scrolldown:${LINES};button3=exit;key_Right=scrolldown:${LINES};key_Left=scrollup:${LINES}${PREVIOUS_PAGE}${NEXT_PAGE}"
rm .gland.thumb*

